{"version":3,"sources":["helpers/index.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","SortingVisualizer/SortingVisualizer.js","App.js","index.js"],"names":["COLOR","arraysAreEqual","jsSortedArray","mySort","length","i","sleep","milliseconds","Promise","resolve","setTimeout","disableAllButtons","arg","buttons","document","querySelectorAll","disabled","disableGNA_btn","getElementById","bubbleSort","array","a","PRIMARY_COLOR","SECONDARY_COLOR","len","arrayBars","getElementsByClassName","j","toUpdateColor_barTwoIdx","toUpdateColor_barOneIdx","style","backgroundColor","Height_newHeight","height","toUpdateHeight_newHeight","heapSort","buildMaxHeap","lastElement","swap","heapify","arr","Math","floor","heap","max","index","rightChild","leftChild","b","mergeSort","mergeAnimations","getMergeSortAnimations","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","push","doMerge","quickSort","end","doQuickSort","start","partition","all","pivotValue","pivotIndex","SortingVisualizer","useState","setArray","sortMethod","setSortMethod","resetArray","min","random","sort","console","log","useEffect","className","onClick","selectAlgorithm","id","map","value","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1e0df9ba.chunk.js","sourcesContent":["// Constants\r\nexport const ANIMATION_SPEED = 3;\r\nexport const NUMBER_OF_ARRAY_BARS = 150;\r\nexport const COLOR = { PRIMARY_COLOR: \"#40dfdf\", SECONDARY_COLOR: \"red\" };\r\n\r\n//HELPER FUNCTIONS\r\nexport function randomIntBetween(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport function arraysAreEqual(jsSortedArray, mySort) {\r\n  if (jsSortedArray.length !== mySort.length) return false;\r\n\r\n  for (let i = 0; i < jsSortedArray.length; i++) {\r\n    if (jsSortedArray[i] !== mySort[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function sleep(milliseconds) {\r\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n}\r\n\r\n// Disable/Enable all buttons\r\nexport function disableAllButtons(arg) {\r\n  const buttons = document.querySelectorAll(\"button\");\r\n  for (let i = 0; i < buttons.length; i++) {\r\n    buttons[i].disabled = arg;\r\n  }\r\n}\r\n\r\n// Enable generate new array btn only so this btn can then enable all button and at the same time generate new array\r\nexport function disableGNA_btn(arg) {\r\n  const button = document.getElementById(\"GNA-btn\");\r\n  button.disabled = arg;\r\n}\r\n","import { COLOR, ANIMATION_SPEED, sleep, disableGNA_btn } from \"../helpers\";\r\n\r\nexport async function bubbleSort(array) {\r\n  const { PRIMARY_COLOR, SECONDARY_COLOR } = COLOR;\r\n  let len = array.length;\r\n  if (len <= 1) return array;\r\n  const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    for (let j = 0; j < len - i - 1; j++) {\r\n      if (array[j] > array[j + 1]) {\r\n        let [toUpdateColor_barOneIdx, toUpdateColor_barTwoIdx] = [j, j + 1];\r\n\r\n        //Change color to show its selected\r\n        arrayBars[\r\n          toUpdateColor_barOneIdx\r\n        ].style.backgroundColor = SECONDARY_COLOR;\r\n        arrayBars[\r\n          toUpdateColor_barTwoIdx\r\n        ].style.backgroundColor = SECONDARY_COLOR;\r\n        await sleep(ANIMATION_SPEED);\r\n\r\n        //Update size\r\n        let [Height_barOneIdx, Height_newHeight] = [j + 1, array[j]];\r\n        arrayBars[Height_barOneIdx].style.height = `${Height_newHeight}px`;\r\n        await sleep(ANIMATION_SPEED);\r\n\r\n        //SWAP\r\n        [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n\r\n        //Update size\r\n        let [toUpdateHeight_barOneIdx, toUpdateHeight_newHeight] = [\r\n          j,\r\n          array[j],\r\n        ];\r\n        arrayBars[\r\n          toUpdateHeight_barOneIdx\r\n        ].style.height = `${toUpdateHeight_newHeight}px`;\r\n        await sleep(ANIMATION_SPEED);\r\n\r\n        //Revert color\r\n        arrayBars[\r\n          toUpdateColor_barOneIdx\r\n        ].style.backgroundColor = PRIMARY_COLOR;\r\n        arrayBars[\r\n          toUpdateColor_barTwoIdx\r\n        ].style.backgroundColor = PRIMARY_COLOR;\r\n        await sleep(ANIMATION_SPEED);\r\n      }\r\n    }\r\n  }\r\n\r\n  disableGNA_btn(false);\r\n  // return array;\r\n}\r\n","import { sleep, ANIMATION_SPEED, COLOR, disableGNA_btn } from \"../helpers\";\r\nconst { PRIMARY_COLOR, SECONDARY_COLOR } = COLOR;\r\nconst arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\nexport async function heapSort(array) {\r\n  // Build max heap\r\n  await buildMaxHeap(array);\r\n\r\n  // Get the index of the last element\r\n  let lastElement = array.length - 1;\r\n\r\n  // Continue heap sorting until we have\r\n  // One element left\r\n  while (lastElement > 0) {\r\n    await swap(array, 0, lastElement);\r\n    await heapify(array, 0, lastElement);\r\n    lastElement -= 1;\r\n  }\r\n\r\n  disableGNA_btn(false);\r\n  // return array;\r\n}\r\n\r\nasync function buildMaxHeap(arr) {\r\n  // Get index of the middle element\r\n  let i = Math.floor(arr.length / 2 - 1);\r\n\r\n  // Build a max heap out of\r\n  // All array elements passed in\r\n  while (i >= 0) {\r\n    await heapify(arr, i, arr.length);\r\n    i -= 1;\r\n  }\r\n}\r\n\r\nasync function heapify(heap, i, max) {\r\n  let index;\r\n  let leftChild;\r\n  let rightChild;\r\n\r\n  while (i < max) {\r\n    index = i;\r\n\r\n    // Get the left child index\r\n    // Using the known formula\r\n    leftChild = 2 * i + 1;\r\n\r\n    // Get the right child index\r\n    // Using the known formula\r\n    rightChild = leftChild + 1;\r\n\r\n    // If the left child is not last element\r\n    // And its value is bigger\r\n    if (leftChild < max && heap[leftChild] > heap[index]) {\r\n      index = leftChild;\r\n    }\r\n\r\n    // If the right child is not last element\r\n    // And its value is bigger\r\n    if (rightChild < max && heap[rightChild] > heap[index]) {\r\n      index = rightChild;\r\n    }\r\n\r\n    // If none of the above conditions is true\r\n    // Just return\r\n    if (index === i) {\r\n      return;\r\n    }\r\n\r\n    // Else swap elements\r\n    await swap(heap, i, index);\r\n\r\n    // Continue by using the swapped index\r\n    i = index;\r\n  }\r\n}\r\n\r\nasync function swap(arr, a, b) {\r\n  let [toUpdateColor_barOneIdx, toUpdateColor_barTwoIdx] = [a, b];\r\n\r\n  //Change color to show its selected\r\n  arrayBars[toUpdateColor_barOneIdx].style.backgroundColor = SECONDARY_COLOR;\r\n  arrayBars[toUpdateColor_barTwoIdx].style.backgroundColor = SECONDARY_COLOR;\r\n  await sleep(ANIMATION_SPEED);\r\n\r\n  //Update size\r\n  let [Height_barOneIdx, Height_newHeight] = [b, arr[a]];\r\n  arrayBars[Height_barOneIdx].style.height = `${Height_newHeight}px`;\r\n  await sleep(ANIMATION_SPEED);\r\n\r\n  // SWAP\r\n  [arr[a], arr[b]] = [arr[b], arr[a]];\r\n\r\n  //Update size\r\n  let [toUpdateHeight_barOneIdx, toUpdateHeight_newHeight] = [a, arr[b]];\r\n  arrayBars[\r\n    toUpdateHeight_barOneIdx\r\n  ].style.height = `${toUpdateHeight_newHeight}px`;\r\n  await sleep(ANIMATION_SPEED);\r\n\r\n  //Revert color\r\n  arrayBars[toUpdateColor_barOneIdx].style.backgroundColor = PRIMARY_COLOR;\r\n  arrayBars[toUpdateColor_barTwoIdx].style.backgroundColor = PRIMARY_COLOR;\r\n  await sleep(ANIMATION_SPEED);\r\n}\r\n","//Merge sort is implemented differently so it returns animations and not the sorted array\r\n\r\nimport { COLOR, ANIMATION_SPEED, sleep, disableGNA_btn } from \"../helpers\";\r\n\r\nexport async function mergeSort(array) {\r\n  const { PRIMARY_COLOR, SECONDARY_COLOR } = COLOR;\r\n  const mergeAnimations = getMergeSortAnimations(array);\r\n  for (let i = 0; i < mergeAnimations.length; i++) {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    const isColorChange = i % 3 !== 2;\r\n    if (isColorChange) {\r\n      const [barOneIdx, barTwoIdx] = mergeAnimations[i];\r\n      const barOneStyle = arrayBars[barOneIdx].style;\r\n      const barTwoStyle = arrayBars[barTwoIdx].style;\r\n      const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n      barOneStyle.backgroundColor = color;\r\n      barTwoStyle.backgroundColor = color;\r\n      await sleep(ANIMATION_SPEED);\r\n    } else {\r\n      const [barOneIdx, newHeight] = mergeAnimations[i];\r\n      const barOneStyle = arrayBars[barOneIdx].style;\r\n      barOneStyle.height = `${newHeight}px`;\r\n      await sleep(ANIMATION_SPEED);\r\n    }\r\n  }\r\n\r\n  disableGNA_btn(false);\r\n}\r\n\r\nfunction getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // Push to change their color.\r\n    animations.push([i, j]);\r\n\r\n    // Push to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // Push to update height\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      // Updating mainArray\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // Push to update height\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      // Updating mainArray\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i]);\r\n\r\n    animations.push([i, i]);\r\n\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j]);\r\n\r\n    animations.push([j, j]);\r\n\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","import { ANIMATION_SPEED, COLOR, sleep, disableGNA_btn } from \"../helpers\";\r\n\r\nconst { PRIMARY_COLOR, SECONDARY_COLOR } = COLOR;\r\nconst arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\nexport async function quickSort(array) {\r\n  let start = 0;\r\n  let end = array.length - 1;\r\n  await doQuickSort(array, start, end);\r\n\r\n  disableGNA_btn(false);\r\n  // return array;\r\n}\r\n\r\nasync function doQuickSort(array, start, end) {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n  let index = await partition(array, start, end);\r\n\r\n  await Promise.all([\r\n    doQuickSort(array, start, index - 1),\r\n    doQuickSort(array, index + 1, end),\r\n  ]);\r\n}\r\n\r\nasync function partition(array, start, end) {\r\n  let pivotValue = array[end];\r\n  let pivotIndex = start;\r\n\r\n  for (let i = start; i < end; i++) {\r\n    if (array[i] < pivotValue) {\r\n      await swap(array, i, pivotIndex);\r\n      pivotIndex++;\r\n    }\r\n  }\r\n  await swap(array, end, pivotIndex);\r\n  return pivotIndex;\r\n}\r\n\r\nasync function swap(array, a, b) {\r\n  let [toUpdateColor_barOneIdx, toUpdateColor_barTwoIdx] = [a, b];\r\n\r\n  //Change color to show its selected\r\n  arrayBars[toUpdateColor_barOneIdx].style.backgroundColor = SECONDARY_COLOR;\r\n  arrayBars[toUpdateColor_barTwoIdx].style.backgroundColor = SECONDARY_COLOR;\r\n  await sleep(ANIMATION_SPEED);\r\n\r\n  //Update size\r\n  let [Height_barOneIdx, Height_newHeight] = [b, array[a]];\r\n  arrayBars[Height_barOneIdx].style.height = `${Height_newHeight}px`;\r\n  await sleep(ANIMATION_SPEED);\r\n\r\n  // SWAP\r\n  [array[a], array[b]] = [array[b], array[a]];\r\n\r\n  //Update size\r\n  let [toUpdateHeight_barOneIdx, toUpdateHeight_newHeight] = [a, array[b]];\r\n  arrayBars[\r\n    toUpdateHeight_barOneIdx\r\n  ].style.height = `${toUpdateHeight_newHeight}px`;\r\n  await sleep(ANIMATION_SPEED);\r\n\r\n  //Revert color\r\n  arrayBars[toUpdateColor_barOneIdx].style.backgroundColor = PRIMARY_COLOR;\r\n  arrayBars[toUpdateColor_barTwoIdx].style.backgroundColor = PRIMARY_COLOR;\r\n  await sleep(ANIMATION_SPEED);\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/SortingVisualizer.css\";\r\nimport {\r\n  mergeSort,\r\n  bubbleSort,\r\n  quickSort,\r\n  heapSort,\r\n} from \"../sortingAlgorithms\";\r\n//CONSTANTS and some helper functions\r\nimport {\r\n  NUMBER_OF_ARRAY_BARS,\r\n  randomIntBetween,\r\n  arraysAreEqual,\r\n  disableAllButtons,\r\n} from \"../helpers\";\r\n\r\nexport default function SortingVisualizer() {\r\n  const [array, setArray] = useState([]);\r\n  const [sortMethod, setSortMethod] = useState(\"Select a sorting algorithm\");\r\n\r\n  useEffect(() => {\r\n    resetArray();\r\n  }, []);\r\n\r\n  function resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntBetween(7, 700));\r\n    }\r\n    setArray(array);\r\n  }\r\n\r\n  async function selectAlgorithm() {\r\n    // INBUILT JS SORT USED FOR COMPARING\r\n    const jsSortedArray = array.slice().sort((a, b) => a - b);\r\n\r\n    if (\r\n      arraysAreEqual(jsSortedArray, array) === false &&\r\n      sortMethod !== \"Select a sorting algorithm\"\r\n    ) {\r\n      disableAllButtons(true);\r\n      switch (sortMethod) {\r\n        case \"BUBBLE SORT\":\r\n          bubbleSort(array);\r\n          break;\r\n\r\n        case \"HEAP SORT\":\r\n          heapSort(array);\r\n          break;\r\n\r\n        case \"MERGE SORT\":\r\n          mergeSort(array);\r\n          break;\r\n\r\n        case \"QUICK SORT\":\r\n          quickSort(array);\r\n          break;\r\n\r\n        default:\r\n          console.log(sortMethod);\r\n          break;\r\n      }\r\n    } else if (sortMethod === \"Select a sorting algorithm\") {\r\n      console.log(\"Select a sorting algorithm\");\r\n    } else {\r\n      console.log(\"Already Sorted, Try shuffling\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <h1>Sorting Visualizer</h1>\r\n        <button\r\n          className=\"btn\"\r\n          onClick={() => {\r\n            selectAlgorithm();\r\n          }}\r\n        >\r\n          Visualize\r\n        </button>\r\n        <button\r\n          id=\"GNA-btn\"\r\n          className=\"btn\"\r\n          onClick={() => {\r\n            resetArray();\r\n            disableAllButtons(false);\r\n          }}\r\n        >\r\n          Generate New Array\r\n        </button>\r\n        <div />\r\n      </div>\r\n\r\n      <div className=\"sort-type\">\r\n        <button className=\"btn\" onClick={() => setSortMethod(\"BUBBLE SORT\")}>\r\n          bubble sort\r\n        </button>\r\n        <button className=\"btn\" onClick={() => setSortMethod(\"HEAP SORT\")}>\r\n          heap sort\r\n        </button>\r\n        <button className=\"btn\" onClick={() => setSortMethod(\"MERGE SORT\")}>\r\n          merg sort\r\n        </button>\r\n        <button className=\"btn\" onClick={() => setSortMethod(\"QUICK SORT\")}>\r\n          quick sort\r\n        </button>\r\n      </div>\r\n      <p className=\"sortName\">{sortMethod}</p>\r\n\r\n      <div className=\"array-holder\">\r\n        {array.map((value, id) => (\r\n          <div\r\n            key={id}\r\n            className=\"array-bar\"\r\n            style={{ height: `${value}px` }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","// import \"./App.css\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}